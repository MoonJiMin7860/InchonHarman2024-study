//우리는 16M를 이용하기에 선언
#define F_CPU 16000000L
#include <avr/io.h>
#include <util/delay.h>
/* 
키보드도 없고 모니터도 없다(전원만 연결되어있는 상태) 그러므로 콘솔 명령어는 사용이 불가능하다.
할 수 있는 것은 port I/O가 전부다.
*/
const int _delay_t = 500;
void TogglePinA(int n) // n : n번째 비트, dl : delay in mili-sende 
{
		char b = 1 << n; //		
		//n = 시프트 시킬 수
		
		PORTA |= b; // PortA의 n번째 비트를 high로 출력
		_delay_ms(_delay_t); //0.5초 대기,_delay_t
	
		PORTA &= ~b;// PortA의 n번째 비트를 Low로 출력
		_delay_ms (_delay_t); //0.5초 대기

}
//0: 입력, 1: 출력
int main(void) //프로그램은 메인은 하나만 탑재가 된다.
{
	DDRA |= 0x07; // port A의 0,1,2번째(PA0,1,2핀) 비트를 출력용으로 사용하겠다., 나머지는 입력
	DDRB &= ~0x01; // Port B의 0번째 비트를 입력용으로 사용, 나머지는 그대로 유지
	int mode = 0; // mode1 : 1번 모드, mode2 : 2번 모드, mode3 : 3번 모드
	
	while (1) // 프로그램은 무한루프(Loop)를 형성해줘야한다., 이게 기본이다.(embedded program의 기본)
    {
		//if(PINB & 0x01 == 1)  // sw가 안눌렸을때 : (true)
		if(!((PINB & 0x01) == 1)) // sw가 눌렸을때 : (true)
		{	
			mode++;
			if(mode >= 3) 
			{							
				mode = 0;
			}
		}
			
		switch(mode)
		{
			case 0:
			TogglePinA(0);
			break;
			case 1:
			TogglePinA(1);
			break;
			case 2:
			TogglePinA(2);
			break;			
			default: mode = 0;
		}		
    }
}
	/*PA0핀에 연결된 LED 끄기
		최하위 비트만 0으로 만들어라
		 0000 0000(=xxxx xxx0) */		
		/*or(|) : 원래의 값을 가지고 있던(xxxx xxxx) 비트에서 어느 한 값만 조정을 하고싶다면(1(출력)or0(입력)) or를 이용하여 1과 or 시켜준다면 기존에 어떤 값으 출력되고 있던 간에
		 1로 바꾸어버린다., 
		 (0000 0100) = PORTA| = 0x04
		  
		 and(&) :원래의 값을 가지고 있던(xxxx xxxx) 비트에서 어느 한 값만을 0으로 만들기 위해 and(&) 시킨다., 그리고 나머지 값은 1로 and(&)시킨다.
		(1111 1011) = PORTA & = ~0x04
		*/	
