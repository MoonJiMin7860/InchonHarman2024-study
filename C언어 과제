#include <stdio.h>
void test01();
void test02();
void test03();
void test04();
void test05();

void Dump(char* p, int len);
// -------함수의 설계--------
//  Prototype : void Copy(char* p1, char* p2);
// 함수명 : copy
// 1. 기능 : p2 문자열을 인수로 받아서 p1 문자열로 복사
// 2. 인수 : 타겟문자열,소스문자열  - char *p1, str *p2
// 3. 리턴값 : void 
void Copy(char* p1, char* p2);
int Length(char* str);
// -------함수의 설계--------
//  Prototype : int Length(char* str)
// 함수명 : Length
// 기능 : 문자열을 인수로 받아서 문자열의 길이를 반환
// 인수 : 문자열 - char *str
// 리턴값 : 문자열의 길이 - int len 
int Compare();
void swap();
void Pyramid();
void 

main()
{
	int n;
	void* pF[] = {test01,test02,test03,test04,test05};
	void(*pFunc)();
	//pFunc 라는 이름의 함수 포인터 선언

	while (1)
	{
		printf("\n\n\n");
		printf("1. ASCII 코드표를 출력하는 프로그램\n");
		printf("2. canf 함수를 이용하여 문자열을 입력받아 한 문자씩 띄어서 출력하시오\n");
		printf("3. swap 함수를 이용하여 두 수를 입력받아 각각의 변수에 저장하여 출력하고,\n 두 변수의 값을각각 바꾸어 다시 저장하고 출력하라 \n\n예) \n4 5swap \n전\t[0001] 4 -- - [0002] 5swap \n후\t[0001] 5 -- - [0002] 4\n");
		printf("\n\n\n");
		printf("4.홀수 한개를 입력받아 *표 피라미드를 출력하는 프로그램. \n");
		printf("5. 두 수를 입력받아 최대공약수를 출력하는 프로그램\n");
		printf("0. 종료\n");

		printf("===========================\n");
		printf("선택: ");
		scanf("%d", &n);
		if (n == 0) return; //0을 입력했을 때 프로그램 종료
		pFunc = pF[n - 1]; //입력되는 번호에 따라 프로그래밍된 것을 출력
		pFunc();
	}
	void test01();
{
	int Ascii;
	for (Ascii = 0; Ascii <= 63; Ascii++)
	{

		if (Ascii % 10 == 0)
		{
			printf("===============================================================\n");
			printf("[ 10진수 ][16진수][8진수][문자열][ 10진수 ][16진수][8진수][문자열]\n");
			printf("===============================================================\n");
		}

		printf("[ %d ]\t[ %x ]\t[ %o ]\t[%c ]\t[% d]\t[% x]\t[% o]\t[% c]\n", Ascii, Ascii, Ascii, Ascii, Ascii + 64, Ascii + 64, Ascii + 64, Ascii + 64);
	}
	/*
	int ASCII;

	for (ASCII = 0; ASCII <= 127; ASCII++)
	{
		printf("[ %d ]\t[ %x ]\t[ %o ]\t[ %c ]\n", ASCII, ASCII, ASCII, ASCII);


		if (ASCII % 20 == 0)
		{
			printf("=====================================\n");
			printf("10진수\t 16진수\t 8진수\t 문자열\n");
			printf("=====================================\n");

		}
	}
	*/
}
}

void test01()
{
	int Ascii;
	for (Ascii = 0; Ascii <= 63; Ascii++)
	{

		if (Ascii % 10 == 0)
		{
			printf("===============================================================\n");
			printf("[ 10진수 ][16진수][8진수][문자열][ 10진수 ][16진수][8진수][문자열]\n");
			printf("===============================================================\n");
		}

		printf("[ %d ]\t[ %x ]\t[ %o ]\t[%c ]\t[% d]\t[% x]\t[% o]\t[% c]\n", Ascii, Ascii, Ascii, Ascii, Ascii + 64, Ascii + 64, Ascii + 64, Ascii + 64);
	}
	/*
	int ASCII;

	for (ASCII = 0; ASCII <= 127; ASCII++)
	{
		printf("[ %d ]\t[ %x ]\t[ %o ]\t[ %c ]\n", ASCII, ASCII, ASCII, ASCII);


		if (ASCII % 20 == 0)
		{
			printf("=====================================\n");
			printf("10진수\t 16진수\t 8진수\t 문자열\n");
			printf("=====================================\n");

		}
	}
	*/
}

void test02()
{
	char art[100];
	while (1)
	{
		/* 1. 예) aaaaa를 입력 한다면, art[0]=a, art[1]=a, art[2]=a, art[3]=a, art[4]=a, art[5]=null 이 생성된다
					2. for 함수가 art[i]와 i++를 이용하여 art[0]부터 art[5]까지 훑고 지나간다
					3. 하나 하나 훑고 지나가면서 (art [0] = a != \0),(art [1] = a != \0),(art [2] = a != \0),(art [3] = a != \0),(art [4] = a != \0),(art [5] = a != \0), 을 실행하게된다.
					4. null과 같은 값을 갖고있지 않고있다면 계속해서 반복실행하며 해당 문자를 뱉어낸다 (a의 경우 a^)
					5. 그런데 (art [5] = null != '\0')의 경우 for 반복문의 조건과 불일치하여 루프를 빠져나오게된다
					6. 그러므로 (aaaaa)의 출력은 (a	a	a	a	a	)
			*/
		printf("> 문자열을 입력해주세요=======\n"); // 시작 안내문구
		scanf("%s", &art); // 입력을 받기위한 함수
		printf(">입력된 문자열은 [ %s ], 문자열의 수는 [ %d ]입니다 ====\n", art, Length(art)); //입력을 받은 문자열의 안내문구
		for (int i = 0; art[i] != '\0'; i++)


		{
			if (art[i] >= 'a' && art[i] <= 'z') //소문자를 대문자로 바꿔주기 위한 if문
			{
				art[i] = art[i] - 32;
			}
			printf("%c\t", art[i]); //test10의 결과값
		}
		printf("\n"); //가독성 향상을 위해 작성된 엔터
	}


	/*
	char str[100];
	while (1)
	{
		printf("문자열을 입력해주세요\n"); // 안내문구
		scanf("%s", &str); // 입력을 위한 선언
		printf("입력된 문자열은 : %s 입니다\n", str); // 안내문구

		for (int i = 0; str[i] != '\0'; i++)
		// str[i]의 i가 null과 일치하지 않을때(!=) a^를 출력하라(printf("%c ", str[i]);)
		// (i가 한칸씩 이동하며 매 칸마다 \0(null)과 다른지 비교한다, 비교했을때 null과 다르다면 문자열을(printf("%c ", str[i]);) 출력한다.
		{
			printf("%c ", str[i]); //결과값 출력
		}
		printf("\n"); //시각적 편의를 위한 엔터
	}
	*/
}

void test03()
{
	  //포인터를 사용하지 않고 성공한 swap
	int q, w;
	
	
	printf("첫번째로 입력된 수.\n");
	scanf("%d", &q);
	printf("입력된 수\n");
	scanf("%d", &w);

	printf("swap!! 전 \t 첫번째 수 = [ %d ] 두번쨰로 입력된 수[ %d ]\n", q, w);
	swap(&q,&w);
	printf("swap!! 후 \t 첫번째 수 = [ %d ] 두번쨰로 입력된 수[ %d ]\n", q, w);
	
}


void test04() // 홀수를 이용한 *피라미드 만들기
{
	/*
	int num;
	printf("피라미드의 층 수는?: ");
	scanf("%d", &num);
	if ((num % 2) != 0)
	{
		Pyramid(num);
	}
	*/
	int a;
	printf("원하는 피라미드의 층 수를 입력해주세요 : ");
	scanf("%d", &a);
	if ((a % 2) != 0)
	{
		Pyramid(a);
	}
}

void test05()
{

}



void Pyramid(int p)
{
	/*
	int a, b, c;
	for (a = 0; a < s; a++)
	{
		for (b = a; b <= s - 1; b++)
		{
			printf(" ");
		}
		for (c = 0; c <= (a * 2); c++)
		{
			printf("*");
		}
		printf("\n");
	}
	int a, b, c;
	for (a = 0; a < p; a++)
	{
		
		printf("\n");
	}
	*/
	int a, b, c;
	// 3가지의 조건(별 생성,줄 바꿈, 띄어쓰기)이 필요하기 때문에 3개의 변수 선언
	for (a = 0; a < p; a++)
	{
		for (b = a; b <= p-1; b++)
		{
			printf(" ");
		}
		for (c = 0; c <= (a * 2); c++)
		{
			printf("*");
		}
		
		printf("\n");
	}
}

void Copy(char* p1, char* p2)
{
	while (*p2) *p1++ = *p2++; *p1 = 0;
}

void Dump(char* p, int len) // 메모리 공간 출력, 16byte, 맨 앞에는 주소 이후는 8개씩 출력 줄바꿈 후 반복
{
	for (int i = 0; i < len; i++) // 안전 공간 메모리 덤프(바이트 단위로 출력)
	{
		if (i % 16 == 0) printf("\n%08x ", p); // 주소값 출력
		if (i % 8 == 0) printf("    ");
		printf("%02x ", (unsigned char)*p++); // 해당 주소에 있는 값 출력

	}
}

int Length(char* str) //char* str 포인터는 시작 위치를 가리키고 있다.
{
	//문자열 str을 인수로 받아서 문자열의 길이를 반환
	// null이 나올때까지 차례차례 점검을 한다, 그리고 점검을 위해 한칸 한칸 짚어갈때마다 +1씩 증가하게만든다)
	int len = 0; // 반환할 문자열의 길이
	{
		while (1)
		{
			if (*(str + len) == 0) break; //문자열의 끝(null)에 도달했으면 탈출하라
			len++;

		}
		return len;
		// 문자열의 특성 : 마지막에 null이 존재한다, 이 특성으로 작업을 수행한다.
		// null이 나올때까지 차례차례 점검을 한다, 그리고 점검을 위해 한칸 한칸 짚어갈때마다 +1씩 증가하게만든다)
	}
}

int Compare(char* s1, char* s2)
// 함수의 기능을 수행하기 위한 재료(도구)를 아규먼트(인자, 매개변수)라고 한다.

{
	int val = 0;

	while (*s1 && *s2 && *s1 == *s2)
	{
		s1++;
		s2++;
	}
	if (*s1 - *s2 == 0) val = 0;
	else if (*s1 - *s2 < 0) val = -1;
	else if (*s1 - *s2 > 0)	val = 1;
	return val;
}

void swap(int *a, int *b)
{
	int e;

	e = *a;
	* a = *b;
	*b = e;

}
